
####################################################################
# Author: Suraj Chopade
# This script is used to install the NDR sensor.
#
# Usage:
#   ansible-playbook -I hosts.ini mountExt4EbsVolume.yaml
#
# Make sure to run this script with appropriate permissions.
####################################################################
---
- name: Manage disk and partition
  hosts: servers
  become: yes
  vars_files:
    - Vars.yml

  tasks:

    - name: Find the first non-partitioned disk
      shell: |
        for disk in $(lsblk -dno NAME); do
          if [ "$(lsblk -no TYPE /dev/$disk)" = "disk" ]; then
            if ! lsblk -no NAME /dev/$disk | grep -q "^${disk}[0-9]"; then
              if [ -z "$(blkid /dev/$disk)" ]; then
                echo "/dev/$disk"
                break
              fi
            fi
          fi
        done
      register: unpartitioned_disk
      changed_when: false

    - name: Fail if no non-partitioned disk is found
      fail:
        msg: "No non-partitioned disk found."
      when: unpartitioned_disk.stdout == ""

    - name: Create a partition on the disk
      parted:
        device: "{{ unpartitioned_disk.stdout }}"
        number: "{{ partition_number }}"
        part_type: primary
        state: present
        align: optimal

    - name: Format the partition with {{ fstype | upper }}
      filesystem:
        fstype: "{{ fstype }}"
        dev: "{{ unpartitioned_disk.stdout }}{{ partition_number }}"

    - name: Label the partition
      command: e2label {{ unpartitioned_disk.stdout }}{{ partition_number }} {{ partition_label }}
      args:
        creates: "/dev/disk/by-label/{{ partition_label }}"

    - name: Create mount point
      file:
        path: "{{ mount_point }}"
        state: directory
        owner: root
        group: root
        mode: "{{ directory_mode }}"

    - name: Mount the partition and ensure fstab entry
      mount:
        path: "{{ mount_point }}"
        src: "LABEL={{ partition_label }}"
        fstype: "{{ fstype }}"
        opts: "defaults,noatime,nodiratime"
        state: mounted

    - name: Change ownership of {{ mount_point }}
      file:
        path: "{{ mount_point }}"
        owner: "{{ owner }}"
        group: "{{ group }}"
        recurse: yes

    - name: Change permissions of {{ mount_point }}
      file:
        path: "{{ mount_point }}"
        mode: "{{ file_mode }}"
        recurse: yes

# Start RSync activity from here
    - name: Start rsync process in screen session
      shell: |
        screen -dmS {{ screen_session_name }} bash -c 'rsync -av {{ src_directory }} {{ dest_directory }}; sleep {{ wait_time }}; screen -ls >> {{ log_file_path }}/rsync_job_$(date +\%Y-\%m-\%d).txt'
      args:
        executable: /bin/bash

    - name: Wait for {{ wait_time }} seconds to allow rsync to start
      wait_for:
        timeout: "{{ wait_time }}"

    - name: Detach screen session after rsync starts
      shell: screen -S {{ screen_session_name }} -X detach
      args:
        executable: /bin/bash

    - name: Check screen sessions and append to log
      shell: screen -ls >> {{ log_file_path }}/rsync_job_$(date +\%Y-\%m-\%d).txt
      args:
        executable: /bin/bash
